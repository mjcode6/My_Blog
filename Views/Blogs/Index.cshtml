@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> UserManager


@model Bloggie.Web.Models.ViewModels.BlogDetailsViewModel
@{

    ViewData["Title"] = Model.PageTitle;
}


<div class="container my-5">

    <div class="justify-content-center  row">

        <div class="col-12 col-lg-6">

            @if(Model != null)
            {
                <h1 class="mb-3">@Model.Heading</h1>

                <div class="d-flex justify-content-between mb-3">

                    <span class="text-secondary">@Model.Author</span>
                    <span class="text-secondary">@Model.PublichedDate.ToShortDateString()</span>
                    
                
                </div>

                <div class="mb-3">

                   @if(signInManager.IsSignedIn(User)){



                        if (Model.Liked)
                        {

                            <a  style="cursor: pointer;">
                                <i class=" bi bi-hand-thumbs-up-fill"></i>
                            </a>
                        }
                        else
                        {
                            <a id="btnLike" style="cursor: pointer;">
                                <i class=" bi bi-hand-thumbs-up"></i>
                            </a>
                        }

                      


                   }

                    <span id="totalLikes">@Model.TotalLikes </span>

                    </div>


                <div class="mb-3 d-flex ">

                    @foreach (var tag in Model.Tags)
                    {
                        <span class="badge bg-secondary me-1">@tag.Name</span>
                    }
                
                </div>

                <img src="@Model.FeaturedImageUrl" class="d-block img-fluid mb-3 " width="300" />



                <div class="mb-3 blog-details-content"> 
                    @Html.Raw(Model.Content)

                </div>
            }
            else
            {
                <p>Blog post not found!</p>
            }



        </div>

    </div>

</div>



@section Scripts{

    <script>

        const btnLikeElement = document.getElementById('btnLike');

        const totalLikeElement = document.getElementById('totalLikes');


        async function getTotalLikes() {


            fetch('/api/BlogPostLike/@Model.Id/totalLikes', {
                method: 'Get',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            }).then(data => data.json())
                .then(result => totalLikeElement.innerHTML = result);
        }






        async function AddLikeForBlog() {


            fetch('/api/BlogPostLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    blogPostId: '@Model.Id',
                    UserId: '@UserManager.GetUserId(User)'
                })
            }).then(() => {
                btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';

                btnLikeElement.removeEventListener('click', AddLikeForBlog);

                getTotalLikes();
            });
        }







        btnLikeElement.addEventListener('click', AddLikeForBlog);


    </script>
    }                    